$("#inputArea").hide();
$("#scatterplot").show();
<% rmin = @data.min_by{|d| d[:rating].to_i}[:rating].to_i %>
<% rmax = @data.max_by{|d| d[:rating].to_i}[:rating].to_i %>
<% dmin = @data.min_by{|d| d[:delta].to_i}[:delta].to_i %>
<% dmax = @data.max_by{|d| d[:delta].to_i}[:delta].to_i %>
<% @data.sort_by!{|d| d[:rating].to_i} %>
jsdata = [];
<% @data.each do |d| %>
jsdata.push(["<%=d[:wdl]%>", <%=d[:rating]%>, <%=d[:delta]%>, "<%=d[:name]%>"]);
<% end %>
y = d3.scale.linear().domain([<%=(dmax == dmin) ? dmax + 40 : dmax%>, <%=(dmax == dmin) ? dmin - 40 : dmin%>]).range([0, 600]);
x = d3.scale.linear().domain([<%=(rmax == rmin) ? rmin - 40 : rmin%>, <%=(rmax == rmin) ? rmax + 40 : rmax%>]).range([0, 800]);
var xAxis = d3.svg.axis().orient("bottom").scale(x).ticks(15);
var yAxis = d3.svg.axis().orient("left").scale(y).ticks(15);
var xpos = ( ( (600 / (<%= dmax - dmin %>) ) * <%= dmax %> ) + 18);
svg.append("g").attr("class","x axis").call(xAxis).attr("transform","translate(60, " + ((xpos > 614) ? 614 : xpos) + ")");
svg.append("g").attr("class","y axis").call(yAxis).attr("transform","translate(60, 20)");

/* Use the logistic regression classifiers trained earlier to predict boundaries for win/no-win and loss/no-loss by rating */
windata = [];
<% rating = rmin 			%>
<% while rating < rmax do 	%>
<%	delta = -500 			%>
<%	y = 1					%>
<%	while delta < 500 && y == 1 do   			%>
<%		delta += 10								%>
<%		y = @winLogReg.result([rating, delta])	%>
<%	end 										%>
windata.push([<%= rating %>, <%= delta %>]);
<% rating += 10 %>
<% end %>

drawdata = [];
<% rating = rmin 			%>
<% while rating < rmax do 	%>
<%	delta = -500 			%>
<%	y = 1					%>
<%	while delta < 500 && y == 1 do   			%>
<%		delta += 10								%>
<%		y = @drawLogReg.result([rating, delta])	%>
<%	end 										%>
drawdata.push([<%= rating %>, <%= delta %>]);
<% rating += 10 %>
<% end %>

/* Draw the lines based on those results */
var winline = d3.svg.line()
    .x(function(d) {return ((800 / (<%= rmax - rmin %>)) * (d[0] - <%=rmin%>) + 60)})
	.y(function(d) {return 600 - ((600 / (<%= dmax - dmin %>)) * (d[1] - <%= dmin %>)) + 20;})
	.interpolate("linear");
var winpath = svg.append("svg:path").attr("d", winline(windata)).style("stroke", "green").style("stroke-width", 3).style("fill", "none");

var drawline = d3.svg.line()
    .x(function(d) {return ((800 / (<%= rmax - rmin %>)) * (d[0] - <%=rmin%>) + 60)})
	.y(function(d) {return 600 - ((600 / (<%= dmax - dmin %>)) * (d[1] - <%= dmin %>)) + 20;})
	.interpolate("linear");
var drawpath = svg.append("svg:path").attr("d", drawline(drawdata)).style("stroke", "blue").style("stroke-width", 3).style("fill", "none");

svg.selectAll("circle")
	.data(jsdata)
	.enter()
	.append("circle")
	.attr("cx", function(d){return (<%= rmax == rmin %>) ? 400 : ((800 / (<%= rmax - rmin %>)) * (d[1] - <%=rmin%>) + 60);})
	.attr("cy", function(d){return (<%= dmax == dmin %>) ? 300 : 600 - ((600 / (<%= dmax - dmin %>)) * (d[2] - <%= dmin %>)) + 20;})
	.on("click", function(d){info1.text(d[3]);  info2.text(d[1] + " vs. " + (d[1] + d[2]));})
	.on("mouseover", function(d){d3.select(this).transition().duration(200).attr("r", 10).style("fill-opacity", 1).style("z-index", 1)})
	.on("mouseout", function(d){d3.select(this).transition().duration(200).attr("r", 5).style("fill-opacity", 0.5).style("z-index", 0)})
	.attr("r", 50)
	.attr("fill-opacity", 0)
	.transition()
	.delay(function(d, i){return 100 + (1000 * (i / jsdata.length))})
	.attr("r", 5).style("fill", function(d){return d[0] == 'L' ? "red" : ((d[0] == 'W') ? "green" : "blue");})
	.style("fill-opacity", 0.5)
	
svg.selectAll(".x.axis").call(xAxis);
svg.selectAll(".y.axis").call(yAxis);

svg.append("svg:rect").attr("x", 2).attr("y", 1).attr("height", 30).attr("width", 45).style("fill", "#DDDDDD").attr("fill-opacity", 0.9)
	.on("click", function(){grid()}).style("cursor", "pointer")
	.on("mouseover", function(){d3.select(this).style("fill", "#DD9999")})
	.on("mouseout", function(){d3.select(this).style("fill", "#DDDDDD")});
buttonText = svg.append("text").attr("transform", "translate(10, 20)").style("fill", "#222222")
	.on("click", function(){grid()}).style("cursor", "pointer")
	.on("mouseover", function(){d3.select("rect").style("fill", "#DD9999")})
	.on("mouseout", function(){d3.select("rect").style("fill", "#DDDDDD")});;
buttonText.text("Grid");

info1 = svg.append("text").attr("transform", "translate(70, 40)").style("fill", "white");
info2 = svg.append("text").attr("transform", "translate(70, 55)").style("fill", "white");