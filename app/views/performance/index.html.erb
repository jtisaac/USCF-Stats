<%= form_tag({}, {:id => "perf"}) do %>
	USCF ID: <%= text_field_tag "uscf_id" %>
	<%= submit_tag "Go" %>
	<div id="options">
	    <label><%= radio_button_tag 'type', 'regular', true %> Regular</label>
	    <label><%= radio_button_tag 'type', 'quick' %> Quick</label>
	</div>
	<div id="ml">
		<label><%= check_box("ml", "active", {}, "yes", "no")%>Machine Learning</label>
		<label><%= check_box("ml", "rating", {}, "yes", "no")%>Use Rating</label>
		<label><%= check_box("ml", "date", {}, "yes", "no")%>Use Date</label>
	</div>
<% end %>
<div id="text">Text goes here</div>
<div id="scatterplot" style="height: 640px; width: 880px; margin-left: 0px; border: 1px solid black; background-color: white;"></div>
<button onclick="grid()" id="grid">Grid</button>
<button onclick="curvy()" id="curvy">Curvy</button>
<%= form_tag({}, {:id => "pred_performance"}) do %>
	Rating: <%= text_field_tag "pred_rating" %>
	Days from today: <%= text_field_tag "pred_date" %>
	<%= submit_tag "Predict" %>
<% end %>
<script type="text/javascript">
var gridOn = false;
var curvyOn = false;

$("#pred_performance").submit(function(){
	alert(	parseFloat(theta[0]) + (   parseFloat($("#pred_rating").val()) * parseFloat(theta[1])  ) + parseFloat(  parseFloat( parseInt((new Date).getTime() / 86400000) + parseInt($("#pred_date").val()) - mindate ) * parseFloat(theta[2])  ));
	return false;
})
$("#perf").submit(function(){
	$("#perf").hide();
	var uscf_id = $("#uscf_id").val();
	/*$.ajax({
		type : 'POST',
		url : '/performance_chart',
		data : {uscf_id: uscf_id, type: $("#type_regular").attr("checked") ? 'regular' : 'quick'},
	    dataType : 'script'
	});
	return false;*/
	var ml = [false, false];
	if($("#ml_active").is(':checked')){
		ml[0] = $("#ml_rating").is(':checked') ? true : false;
		ml[1] = $("#ml_date").is(':checked') ? true : false;
	}
	
	$.ajax({
		type : 'GET',
		url : '/perf_history',
		data : {uscf_id: uscf_id, type: $("#type_regular").attr("checked") ? 'regular' : 'quick'},
	    dataType : 'json',
	  	error : function(){
			alert("There's an error!  e-mail acl68@case.edu");
		},
		success : function(data){
			if (!data){
				$("#delta").show();
				return; //There's an error
			}
			numTournaments = data.length;
			if (numTournaments == 0){
				$("#delta").show();
				return;	//No tournament history
			}
			
			results = [];
			
			j = 0;
			for (i = 0; i < numTournaments; i++){
				$.ajax({
					type : 'GET',
					url : '/perf_results',
					data : {uscf_id: uscf_id, rating: data[i].rating, tournament: data[i].id, section: data[i].section, name: data[i].name, date: data[i].date},
					dataType : 'json',
					error : function(){
						alert("There's an error!  e-mail acl68@case.edu");
					},
					success : function(data2){
						results = results.concat(data2);
						j++
						$("text").html(j + "/" + numTournaments)
						//$("#text").html("Loading... " + Math.ceil((j / numTournaments) * 100) + "%<br />Tournament: " + j + "/" + numTournaments);
						if (j == numTournaments){
							$.ajax({
								type : 'POST',
								url : '/performance_chart',
								data : {results: results, ml: (ml[0] || ml[1]) ? "true" : "false", ml_rating: ml[0], ml_date: ml[1]},
								dataType: 'script'
							});
						}
					}
				})
			}
		}
	})
	return false;
});
		
		
		
function grid(){
	if (gridOn == false){
		$("#grid").text("No grid");
		xAxis.tickSize(-600, 0, 6).tickPadding(9);
		yAxis.tickSize(-800, 0, 6).tickPadding(9);
		svg.selectAll(".x.axis").call(xAxis);
		svg.selectAll(".y.axis").call(yAxis);
		gridOn = true;
	} else {
		$("#grid").text("Grid");
		xAxis.tickSize(0, 0, 6).tickPadding(9);
		yAxis.tickSize(0, 0, 6).tickPadding(9);
		svg.selectAll(".x.axis").call(xAxis);
		svg.selectAll(".y.axis").call(yAxis);
		gridOn = false;
	}
}

function curvy(){
	if (curvyOn == false){
		$("#curvy").text("Linear");
		rateline.interpolate('cardinal');
		perfline.interpolate('cardinal');
		perfpath.attr("d", perfline(jsdata));
		ratepath.attr("d", rateline(jsdata));
		curvyOn = true;
	} else{
		$("#curvy").text("Curvy");
		rateline.interpolate('linear');
		perfline.interpolate('linear');
		perfpath.attr("d", perfline(jsdata));
		ratepath.attr("d", rateline(jsdata));
		curvyOn = false;
	}
}
</script>
