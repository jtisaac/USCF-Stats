<% rmin = @performances.min_by{|d| d[:rating].to_i}[:rating].to_i %>
<% rmax = @performances.max_by{|d| d[:rating].to_i}[:rating].to_i %>
<% pmin = @performances.min_by{|d| d[:performance].to_i}[:performance].to_i %>
<% pmax = @performances.max_by{|d| d[:performance].to_i}[:performance].to_i %>

<div id="scatterplot" style="height: 640px; width: 880px; margin-left: 0px; border: 1px solid black; background-color: white;"></div>

<script type="text/javascript">
jsdata = [];
<% @performances.each do |d| %>
<% puts d %>
jsdata.push([<%=d[:rating]%>, <%=d[:performance]%>]);
<% end %>
var svg = d3.select("#scatterplot").append("svg").attr("width", "100%").attr("height", "100%");
y = d3.scale.linear().domain([<%=(pmax == pmin) ? pmax + 40 : pmax%>, <%=(pmax == pmin) ? pmin - 40 : pmin%>]).range([0, 600]);
x = d3.scale.linear().domain([<%=(rmax == rmin) ? rmin - 40 : rmin%>, <%=(rmax == rmin) ? rmax + 40 : rmax%>]).range([0, 800]);
var xAxis = d3.svg.axis().orient("bottom").scale(x).ticks(15);
var yAxis = d3.svg.axis().orient("left").scale(y).ticks(15);
var xpos = ( ( (600 / (<%= pmax - pmin %>) ) * <%= pmax %> ) + 18);
svg.append("g").attr("class","x axis").call(xAxis).attr("transform","translate(60, " + ((xpos > 614) ? 614 : xpos) + ")");
svg.append("g").attr("class","y axis").call(yAxis).attr("transform","translate(60, 20)");
svg.selectAll("circle")
	.data(jsdata)
	.enter()
	.append("circle")
	.attr("cx", function(d){return (<%= rmax == rmin %>) ? 400 : ((800 / (<%= rmax - rmin %>)) * (d[0] - <%=rmin%>) + 60);})
	.attr("cy", function(d){return (<%= pmax == pmin %>) ? 300 : 600 - ((600 / (<%= pmax - pmin %>)) * (d[1] - <%= pmin %>)) + 20;})
	.attr("r", 5).style("fill", "blue")
	.style("fill-opacity", 0.5);
svg.selectAll(".x.axis").call(xAxis);
svg.selectAll(".y.axis").call(yAxis);
var line = d3.svg.line()
    .x(function(d) { return (<%= rmax == rmin %>) ? 400 : ((800 / (<%= rmax - rmin %>)) * (d[0] - <%=rmin%>) + 60);})
    .y(function(d) { return (<%= pmax == pmin %>) ? 300 : 600 - ((600 / (<%= pmax - pmin %>)) * (d[1] - <%= pmin %>)) + 20;})
    .interpolate("linear");
svg.append("svg:path").attr("d", line(jsdata));
console.log("Supposedly we're good now");
</script>
