<% def date_int(date)
  date = date.to_s
  return (Date.new(date[0, 4].to_i, date[4, 2].to_i, date[6, 2].to_i) - Date.new(1970, 01, 01)).to_i
end %>


<% rmin = @performances.min_by{|d| d[:rating].to_i}[:rating].to_i %>
<% rmax = @performances.max_by{|d| d[:rating].to_i}[:rating].to_i %>
<% pmin = @performances.min_by{|d| d[:performance].to_i}[:performance].to_i %>
<% pmax = @performances.max_by{|d| d[:performance].to_i}[:performance].to_i %>
<% dmin = @performances.min_by{|d| d[:date].to_i}[:date].to_i %>
<% dmax = @performances.max_by{|d| d[:date].to_i}[:date].to_i %>
<% ymin = [rmin, pmin].min %>
<% ymax = [rmax, pmax].max %>
<% @performances.sort_by!{|d| d[:date]} %>
var theta = <%=(@theta != nil) ? @theta : []%>
var mindate = <%=date_int(dmin)%>
$("#scatterplot").show();
$("#curvy").show();
$("#pred_performance").show();

var jsdata = [];
<% @performances.each do |d| %>
jsdata.push([<%=d[:date]%>, <%=d[:performance]%>, <%=d[:rating]%>, "<%=d[:name]%>", <%=(@theta != nil) ? @theta[0] + (d[:rating].to_i * @theta[1]) + ((date_int(d[:date]) - date_int(dmin)) * @theta[2]) : 0%>]);
<% end %>
console.log(jsdata);

<% if @theta != nil then %>$("#text").html("<%=@theta[0]%> + <%=@theta[1]%>(rating) + <%=@theta[2]%>(day)");<% else %> $("#text").hide(); <% end %>

var svg = d3.select("#scatterplot").append("svg").attr("width", "100%").attr("height", "100%");

info1 = svg.append("text").attr("transform", "translate(70, 40)").style("fill", "white");
info2 = svg.append("text").attr("transform", "translate(70, 55)").style("fill", "white");
info3 = svg.append("text").attr("transform", "translate(70, 70)").style("fill", "white");
info4 = svg.append("text").attr("transform", "translate(70, 85)").style("fill", "white");

var format = d3.time.format("%Y%m%d");

x = d3.time.scale().domain([format.parse("<%=dmin%>"), format.parse("<%=dmax%>")]).range([0, 800]);
y = d3.scale.linear().domain([<%=(ymax == ymin) ? ymax + 40 : ymax%>, <%=(ymax == ymin) ? ymin - 40 : ymin%>]).range([0, 600]);

var xAxis = d3.svg.axis().orient("bottom").scale(x).ticks(10).tickPadding(3).tickFormat(d3.time.format("%b %y"));
var yAxis = d3.svg.axis().orient("left").scale(y).ticks(15).tickPadding(3);

var perfxpos = ( ( (600 / (<%= pmax - pmin %>) ) * <%= pmax %> ) + 18);
var ratexpos = ( ( (600 / (<%= rmax - rmin %>) ) * <%= rmax %> ) + 18);

svg.append("g").attr("class","x axis").call(xAxis)
	.attr("transform","translate(60, " + ((Math.max(ratexpos, perfxpos) > 614) ? 614 : Math.max(ratexpos, perfxpos)) + ")");
svg.append("g").attr("class","y axis").call(yAxis).attr("transform","translate(60, 20)");
		
svg.selectAll(".x.axis").call(xAxis);
svg.selectAll(".y.axis").call(yAxis);
var perfline = d3.svg.line()
    .x(function(d) { 	max = (+format.parse("<%=dmax%>"))/1000;
						min = (+format.parse("<%=dmin%>"))/1000;
						n   = +format.parse(d[0].toString())/1000;
						return (800 / (max - min)) * (n - min) + 60
					})
    .y(function(d) { return (<%= pmax == pmin %>) ? 300 : 600 - ((600 / (<%= ymax - ymin %>)) * (d[1] - <%= ymin %>)) + 18;})
    .interpolate("linear");
var rateline = d3.svg.line()
    .x(function(d) { 	max = (+format.parse("<%=dmax%>"))/1000;
						min = (+format.parse("<%=dmin%>"))/1000;
						n   = +format.parse(d[0].toString())/1000;
						return (800 / (max - min)) * (n - min) + 60
					})
	.y(function(d) { return (<%= rmax == rmin %>) ? 300 : 600 - ((600 / (<%= ymax - ymin %>)) * (d[2] - <%= ymin %>)) + 18;})
	.interpolate("linear");
var perfpath = svg.append("svg:path").attr("d", perfline(jsdata)).style("stroke", "blue").style("stroke-width", 3).style("fill", "none");
var ratepath = svg.append("svg:path").attr("d", rateline(jsdata)).style("stroke", "red").style("stroke-width", 3).style("fill", "none");

svg.selectAll("circle")
	.data(jsdata)
	.enter()
	.append("circle")
	.on("click", function(d){info1.text(d[3]);
		 					 info2.text(format.parse(d[0].toString()).toDateString());
							 info3.text("Rating: " + d[2]);
							 info4.text("Performance: " + d[1].toFixed(2));
							})
	.attr("r", 10).style("fill", "#FF8888")
	.on("mouseover", function(d){d3.select(this).transition().duration(200).style("fill", "#FF8888").attr("r", 9).style("z-index", 1)})
	.on("mouseout", function(d){d3.select(this).transition().duration(200).style("fill", "#FF2222").attr("r", 5).style("z-index", 0)})
	.attr("cx", function(d){ 	max = (+format.parse("<%=dmax%>"))/1000;
								min = (+format.parse("<%=dmin%>"))/1000;
								n   = +format.parse(d[0].toString())/1000;
								return (800 / (max - min)) * (n - min) + 60
					})
	.attr("cy", function(d){
		return (<%= rmax == rmin %>) ? 300 : 600 - ((600 / (<%= ymax - ymin %>)) * (d[2] - <%= ymin %>)) + 20;})
	.transition()
	.delay(function(d, i){return 100 + (1000 * (i / jsdata.length));})
	.attr("r", 5).style("fill", "#FF2222")
	.style("stroke", "#550000").style("stroke-width", 2);
svg.selectAll("circleTwo")
	.data(jsdata)
	.enter()
	.append("circle")
	.on("click", function(d){info1.text(d[3]);
		 					 info2.text(format.parse(d[0].toString()).toDateString());
							 info3.text("Rating: " + d[2]);
							 info4.text("Performance: " + d[1].toFixed(2));
							})
	.attr("r", 10).style("fill", "#8888FF")
	.on("mouseover", function(d){d3.select(this).transition().duration(200).style("fill", "#8888FF").attr("r", 9).style("z-index", 1)})
	.on("mouseout", function(d){d3.select(this).transition().duration(200).style("fill", "#2222FF").attr("r", 5).style("z-index", 0)})
	.attr("cx", function(d){ 	max = (+format.parse("<%=dmax%>"))/1000;
								min = (+format.parse("<%=dmin%>"))/1000;
								n   = +format.parse(d[0].toString())/1000;
								return (800 / (max - min)) * (n - min) + 60
					})
	.attr("cy", function(d){return (<%= pmax == pmin %>) ? 300 : 600 - ((600 / (<%= ymax - ymin %>)) * (d[1] - <%= ymin %>)) + 20;})
	.transition()
	.delay(function(d, i){return 100 + (1000 * (i / jsdata.length));})
	.attr("r", 5).style("fill", "#2222FF")
	.style("stroke", "#000055").style("stroke-width", 2);
	
svg.append("svg:rect").attr("x", 2).attr("y", 1).attr("height", 30).attr("width", 45).style("fill", "#DDDDDD").attr("fill-opacity", 0.9)
	.on("click", function(){grid()}).style("cursor", "pointer")
	.on("mouseover", function(){d3.select(this).style("fill", "#DD9999")})
	.on("mouseout", function(){d3.select(this).style("fill", "#DDDDDD")});
buttonText = svg.append("text").attr("transform", "translate(10, 20)").style("fill", "#222222")
	.on("click", function(){grid()}).style("cursor", "pointer")
	.on("mouseover", function(){d3.select("rect").style("fill", "#DD9999")})
	.on("mouseout", function(){d3.select("rect").style("fill", "#DDDDDD")});;
buttonText.text("Grid");
	
<% if (@theta) %>
var mlline = d3.svg.line()
    .x(function(d) { 	max = (+format.parse("<%=dmax%>"))/1000;
						min = (+format.parse("<%=dmin%>"))/1000;
						n   = +format.parse(d[0].toString())/1000;
						return (800 / (max - min)) * (n - min) + 60
					})
	.y(function(d) { return (<%= rmax == rmin %>) ? 300 : 600 - ((600 / (<%= ymax - ymin %>)) * (d[4] - <%= ymin %>)) + 18;})
	.interpolate("linear");
var mlpath = svg.append("svg:path").attr("d", mlline(jsdata)).style("stroke", "green").style("stroke-width", 3).style("fill", "none");
<% end %>